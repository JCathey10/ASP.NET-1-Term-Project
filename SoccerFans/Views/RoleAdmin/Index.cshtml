@model IEnumerable<IdentityRole>
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Mvc.ViewEngines
@inject IWebHostEnvironment Environment
@inject ICompositeViewEngine Engine
@{
    // Using ViewData to send the Title back to _Layout
    ViewBag.Title = "Roles";
    Layout = "_Layout";
}
    <header>
        <div id="logo">Soccer&nbsp;Fans</div>
    </header>
    <nav class="navbar navbar-default">
        <div class="container-fluid">
            <div class="navbar-header">
                <a class="navbar-brand" asp-controller="Home" asp-action="Home">Soccer Fans</a>
            </div>
            <ul class="nav navbar-nav">
                <li><a asp-controller="Home" asp-action="Home">Home</a></li>
                <li><a asp-controller="Home" asp-action="News">Recent News</a></li>
                <li><a asp-controller="Home" asp-action="Footage">Footage</a></li>
                <li><a asp-controller="Home" asp-action="About">About</a></li>
                <li><a asp-controller="Admin" asp-action="Index">Users</a></li>
            </ul>
            <ul class="nav navbar-nav navbar-right">
                @{
                    var result = Engine.FindView(ViewContext, "_LoginPartial", isMainPage: false);
                }
                @if (result.Success)
                {
                    await Html.RenderPartialAsync("_LoginPartial");
                }
                else
                {
                    throw new InvalidOperationException("The default Identity UI layout requires a partial view '_LoginPartial' " +
                        "usually located at '/Pages/_LoginPartial' or at '/Views/Shared/_LoginPartial' to work. Based on your configuration " +
                        $"we have looked at it in the following locations: {System.Environment.NewLine}{string.Join(System.Environment.NewLine, result.SearchedLocations)}.");
                }
            </ul>
        </div>
    </nav>
<div id="wrapper">
    <div class="bg-primary m-1 p-1"><h4>Roles</h4></div>

    <div class="text-danger" asp-validation-summary="ModelOnly"></div>
    <table class="table table-sm table-bordered table-bordered">
        <tr><th>ID</th><th>Name</th><th>Users</th><th></th></tr>
        @if (Model.Count() == 0)
        {
            <tr><td colspan="4" class="text-center">No Roles</td></tr>
        }
        else
        {
            foreach (var role in Model)
            {
                <tr>
                    <td>@role.Id</td>
                    <td>@role.Name</td>
                    <td identity-role="@role.Id"></td>
                    <td>
                        <form asp-action="Delete" asp-route-id="@role.Id" method="post">
                            <a class="btn btn-sm btn-primary" asp-action="Edit"
                               asp-route-id="@role.Id">Edit</a>
                            <button type="submit"
                                    class="btn btn-sm btn-danger">
                                Delete
                            </button>
                        </form>
                    </td>
                </tr>
            }
        }
    </table>

    <a class="btn btn-primary" asp-action="Create">Create</a>
</div>

